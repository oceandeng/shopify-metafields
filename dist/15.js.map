{"version":3,"sources":["webpack:///./src/components/dialog/ConfirmModal.js","webpack:///./src/pages/ActivityLog.js"],"names":["ConfirmModal","props","modalTitle","modalText","state","modalOpen","loading","item","this","setState","onModalDelete","open","title","primaryAction","destructive","content","onAction","handleModalDelete","secondaryActions","handleModalClose","onClose","Section","React","Component","ActivityLog","apiURL","window","appEnvironment","active","hasPrevious","hasNext","currentPage","rows","data","params","limit","page","axios","get","then","res","d","map","setData","current_page","prev_page_url","next_page_url","catch","err","refs","handleModalOpen","cb","delete","id","getLog","type","className","style","resource","items","handleCalcDate","created_at","updated_at","status","source","viewBox","xmlns","cx","cy","r","fill","color","spacing","CircleTickMajor","CircleCancelMajor","download","href","web_path","target","CircleDownMajor","plain","icon","DeleteMajor","onClick","handleOpenConfirmModal","p","date","timeZone","publicTools","clientTimeZone","timeStamp","Date","getTime","currentTime","hour","munite","t","prefix","getExactTime","notFullScreen","columnContentTypes","headings","length","distribution","onPrevious","handlePageChange","onNext","onDismiss","toggleActive","ref","handleDelete"],"mappings":"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","file":"15.js","sourcesContent":["import React from 'react'\nimport { Modal, TextContainer } from '@shopify/polaris'\n\nclass ConfirmModal extends React.Component {\n  constructor(props) {\n    super(props)\n\n    const { modalTitle, modalText } = this.props\n\n    this.state = {\n      modalOpen: false,\n      loading: false,\n      item: {},\n      modalTitle,\n      modalText\n    }\n  }\n\n  handleModalDelete () {\n    const { item } = this.state\n    this.setState({loading: true})\n    this.props.onModalDelete(item, () => {\n      this.setState({ loading: false, modalOpen: false})\n    })\n  }\n\n  handleModalOpen (item) {\n    this.setState({ modalOpen: true, item })\n  }\n\n  handleModalClose () {\n    this.setState({ modalOpen: false })\n  }\n\n  render () {\n    const { modalOpen, modalTitle, modalText, loading } = this.state\n\n    return (\n      <Modal\n        open={modalOpen}\n        title={modalTitle}\n        primaryAction={{\n          destructive: true,\n          content: 'Delete',\n          loading,\n          onAction: () => {\n            this.handleModalDelete()\n          }\n        }}\n        secondaryActions={[\n          {\n            content: 'Cancel',\n            onAction: () => {\n              this.handleModalClose()\n            }\n          }\n        ]}\n        onClose={() => { this.handleModalClose() }}\n      >\n        <Modal.Section>\n          <TextContainer>\n            <p>{modalText}</p>\n          </TextContainer>\n        </Modal.Section>\n      </Modal>\n    )\n  }\n}\n\nexport default ConfirmModal","import React from \"react\";\nimport { Card, DataTable, Badge, Pagination, Icon, Button, Toast, Stack, Frame } from '@shopify/polaris';\nimport Loading from '../components/Loading'\nimport ConfirmModal from '../components/dialog/ConfirmModal'\nimport {\n  CircleDownMajor,\n  DeleteMajor,\n  CircleTickMajor,\n  CircleCancelMajor\n} from '@shopify/polaris-icons'\nclass ActivityLog extends React.Component {\n  constructor(props) {\n    super(props)\n\n    this.apiURL = `${window.appEnvironment.apiURL}eximportlog`;\n\n    this.state = {\n      active: false,\n      hasPrevious: false,\n      hasNext: false,\n      currentPage: 1,\n      loading: true,\n      rows: [],\n      data: []\n    }\n  }\n\n  getLog () {\n    this.setState({ loading: true })\n    let params = {\n      limit: 10,\n      page: this.state.currentPage\n    }\n    window.axios.get(this.apiURL, { params }).then(res => {\n      let d = res.data.data\n\n      let data = d.data.map(item => {\n        return {\n          ...item,\n        }\n      })\n\n      this.setData(data, () => {\n        this.setState({ currentPage: d.current_page, hasPrevious: d.prev_page_url, hasNext: d.next_page_url, loading: false })\n      })\n    }).catch(err => {\n      this.setState({ loading: false })\n    })\n  }\n\n  handleOpenConfirmModal (item) {\n    this.refs.ConfirmModal.handleModalOpen(item)\n  }\n\n  handleDelete (item, cb) {\n    window.axios\n        .delete(`${window.appEnvironment.apiURL}eximportlog/${item.id}`)\n        .then((res) => {\n            this.setState({ active: true }, () => {\n                cb && cb();\n                this.getLog();\n            });\n        })\n        .catch((err) => {\n            cb && cb();\n        });\n  }\n\n  setData (data, cb) {\n    function IconWithReactChild() {\n      const iconContent = () => {\n        return (\n          <svg viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\">\n            <circle cx=\"10\" cy=\"10\" r=\"10\" fill=\"#006fbb\" />\n            <circle cx=\"10\" cy=\"10\" r=\"6\" fill=\"currentColor\" />\n          </svg>\n        );\n      };\n    \n      return <div className=\"runIcon\"><Icon source={iconContent} color=\"blue\" /></div>;\n    }\n    this.setState({ data }, () => {\n\n      let rows = this.state.data.map(item => {\n        let type = item.type == 1 ? 'Import' : item.type == 2 ? 'Export' : item.type == 3 ? 'Bulk_Export' : item.type == 4 ? 'Bulk_Import' : ''\n        let resource = (<div className=\"tc\" style={{ 'whiteSpace': 'normal', 'wordBreak': 'break-all' }}>{item.resource}</div>)\n        let items = (<div className=\"tc\">{item.items}</div>)\n        let created_at = this.handleCalcDate(item.created_at)\n        let updated_at = this.handleCalcDate(item.updated_at)\n        let status = item.status == 0 ? <div className=\"tc flex-con\">{IconWithReactChild()}<Badge status=\"info\">Running</Badge></div> : item.status == 1 ? <div className=\"tc flex-box\"><Stack spacing=\"extraTight\"><Icon\n        source={CircleTickMajor}  color=\"green\" /><Badge status=\"success\">Completed</Badge></Stack></div> : item.status == 2 ? <div className=\"tc flex-box\"><Stack spacing=\"extraTight\"><Icon\n        source={CircleCancelMajor}  color=\"red\" /><Badge status=\"critical\">Failed</Badge></Stack></div> : ''\n        let download = item.status == 1 && (item.type == 2 || item.type == 3) ? <a className=\"url\" download href={item.web_path} target=\"_blank\"><Icon source={CircleDownMajor} /></a> : ''\n        let deleteItem = item.status !=0 ? (<Button plain icon={DeleteMajor} onClick={() => { this.handleOpenConfirmModal(item) }}></Button>):''\n\n        return [\n          type,\n          resource,\n          items,\n          created_at,\n          updated_at,\n          status,\n          download,\n          deleteItem\n        ]\n      })\n\n      this.setState({ rows }, () => {\n        cb && cb()\n      })\n    })\n  }\n\n  handlePageChange (p) {\n    this.setState({ currentPage: p }, () => {\n      this.getLog()\n    })\n  }\n\n  toggleActive () {\n    this.setState({ active: !this.state.active })\n  }\n\n  handleCalcDate (date) {\n    var timeZone = window.publicTools.clientTimeZone()\n    let timeStamp = new Date(date).getTime()\n    let currentTime = timeZone.hour * 60 * 60 * 1000 + timeZone.munite * 60 * 1000\n\n    let t = timeZone.prefix == \"+\" ? timeStamp + currentTime : timeStamp - currentTime\n\n    return window.publicTools.getExactTime(t)\n  }\n\n  componentDidMount () {\n    this.getLog()\n  }\n\n  render () {\n    const { currentPage, active, hasPrevious, hasNext, loading, rows } = this.state\n\n    return (\n      <Frame>\n        <div className=\"wrapper\">\n          <div className=\"container\">\n            <Card>\n              <div className=\"spinner-rel-body\">\n                {loading && <Loading notFullScreen />}\n                <div className=\"min-height300\">\n                  <DataTable\n                    columnContentTypes={[\n                      'text',\n                      'numeric',\n                      'numeric',\n                      'numeric',\n                      'numeric',\n                      'text',\n                      'text'\n                    ]}\n                    headings={[\n                      'Type',\n                      <div className=\"tc\">Resource</div>,\n                      <div className=\"tc\">Items</div>,\n                      <div className=\"tc\">Start At</div>,\n                      <div className=\"tc\">End At</div>,\n                      <div className=\"tc\">Status</div>,\n                      'Download',\n                      ''\n                    ]}\n                    rows={rows}\n                  />\n                  {(!rows.length && !loading) && <div className=\"tc g9 mt100 f20\">No Log</div>}\n                </div>\n                <Stack distribution=\"fill\">\n                  <div className=\"section-list_footer tc\">\n                    <Pagination\n                      hasPrevious={!!hasPrevious}\n                      onPrevious={() => {\n                        let p = currentPage\n                        if (p > 0) {\n                          p--\n                        }\n                        this.handlePageChange(p)\n                      }}\n                      hasNext={!!hasNext}\n                      onNext={() => {\n                        let p = currentPage\n                        if (!!hasNext) {\n                          p++\n                        }\n                        this.handlePageChange(p)\n                      }}\n                    />\n                  </div>\n                </Stack>\n              </div>\n              {active && <Toast content=\"Delete Success\" onDismiss={() => { this.toggleActive() }} />}\n            </Card>\n          </div>\n        </div>\n        <ConfirmModal\n          ref=\"ConfirmModal\"\n          modalTitle=\"Delete this log?\"\n          modalText=\"Are you sure you want to delete this log?\"\n          onModalDelete={(item, cb) => { this.handleDelete(item, cb) }} />\n      </Frame>\n    )\n  }\n}\n\nexport default ActivityLog;"],"sourceRoot":""}